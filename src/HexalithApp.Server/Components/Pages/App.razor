@using System.Net
@using Hexalith.Application.Modules
@using Hexalith.Application.Modules.Applications
@using Hexalith.Application.Modules.Routes

@inject NavigationManager NavigationManager
@inject IServerApplication Application
@inject IRouteManager RouteManager

@if (_initialized)
{
	<!DOCTYPE html>
	<html lang="en" style="--blazor-load-percentage:100%; --blazor-load-percentage-text:100%;">

	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<base href="/" />
		<link rel="stylesheet" href="app.css" />
		<link rel="stylesheet" href="HexalithApp.Server.styles.css" />
		<link rel="icon" type="image/x-icon" href="favicon.ico" />
		<HeadOutlet/>
		<script type="text/javascript">
			(function (c, l, a, r, i, t, y) {
				c[a] = c[a] || function () { (c[a].q = c[a].q || []).push(arguments) };
				t = l.createElement(r); t.async = 1; t.src = "https://www.clarity.ms/tag/" + i;
				y = l.getElementsByTagName(r)[0]; y.parentNode.insertBefore(t, y);
			})(window, document, "clarity", "script", "nfc6kuwdp8");
		</script>
		<style>
			.hidden-body {
				visibility: hidden;
				background-color: #272727;
			}
		</style>
		<style>
			pre[class~="snippet"] {
				<br> --font-monospace: "courier";
				<br> --type-ramp-base-font-variations: unset;
				<br> font-weight: bold;
				<br>
			}
		</style>
	</head>

	<body>
		<Routes/>
		<script src="_content/Microsoft.FluentUI.AspNetCore.Components/Microsoft.FluentUI.AspNetCore.Components.lib.module.js" type="module" async></script>
		<script src="_framework/blazor.web.js"></script>
		<script>
			window.hexalithCulture = {
				get: () => window.localStorage['HexalithCulture'],
				set: (value) => window.localStorage['HexalithCulture'] = value
			};
		</script>
		<script>
			function getCookie(name) {
				const value = `; ${document.cookie}`;
				const parts = value.split(`; ${name}=`);
				if (parts.length === 2) {
					return parts.pop().split(';').shift();
				}
				return '';
			}
		</script>
	</body>

	</html>
}
@code
{
	private bool _initialized;

	protected override async Task OnInitializedAsync()
	{
		var url = new Uri(NavigationManager.Uri);
		HandleRedirect(url);
		_initialized = true;
		await base.OnInitializedAsync();
	}

	private void HandleRedirect(Uri url)
	{
		if (string.IsNullOrWhiteSpace(url.AbsolutePath) || url.AbsolutePath.Equals("/", StringComparison.OrdinalIgnoreCase))
		{
			NavigationManager.NavigateTo(Application.HomePath);
		}
		// Get the mapped route for the current path
		var alias = RouteManager.MapPath(url.AbsolutePath);
		// get first default alias
		if (!alias.Equals(url.AbsolutePath, StringComparison.OrdinalIgnoreCase))
		{
			// redirect to default alias
			NavigationManager.NavigateTo(alias);
		}
	}
}