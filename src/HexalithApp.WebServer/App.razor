@inject NavigationManager NavigationManager
@inject IRouteManager RouteManager
@inject IHostEnvironment Env
@using System.Net
@using Hexalith.Application.Modules
@using Hexalith.Application.Modules.Applications
@using Hexalith.Application.Modules.Routes
@using Microsoft.AspNetCore.Mvc.Rendering
@using System.Globalization
@using Microsoft.AspNetCore.Localization

<!DOCTYPE html>
<html lang="en" style="--blazor-load-percentage:100%; --blazor-load-percentage-text:100%;">
<head>
    <base href="/" />
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="@Assets["app.css"]" />
    <link rel="stylesheet" href="@Assets["HexalithApp.WebServer.styles.css"]" />
    <link href="_content/Microsoft.FluentUI.AspNetCore.Components/css/reboot.css" rel="stylesheet" />
    <script src="_content/Microsoft.FluentUI.AspNetCore.Components/Microsoft.FluentUI.AspNetCore.Components.lib.module.js" type="module" async></script>
    <script src="_content/Microsoft.FluentUI.AspNetCore.Components/js/loading-theme.js" type="text/javascript"></script>
    <loading-theme storage-name="FluentUITheme"></loading-theme>
    <ImportMap />
    <link rel="icon" type="image/x-icon" href="favicon.ico" />
    <HeadOutlet @rendermode="@PageRenderMode" />
    <style>
        .hidden-body {
            visibility: hidden;
            background-color: #272727;
        }
    </style>
    <style>
        pre[class~="snippet"] {
            --font-monospace: "courier";
            --type-ramp-base-font-variations: unset;
            font-weight: bold;
        }
    </style>
</head>

<body>
    <Routes @rendermode="@PageRenderMode" />
    <script src="_framework/blazor.web.js"></script>
    <script>
        window.hexalithCulture = {
            getCulture: () => window.localStorage['hexalithCulture'],
            setCulture: (value) => window.localStorage['hexalithCulture'] = value
        };
    </script>
    <script>
        function getCookie(name) {
            const value = `; ${document.cookie}`;
            const parts = value.split(`; ${name}=`);
            if (parts.length === 2) {
                return parts.pop().split(';').shift();
            }
            return '';
        }
    </script>
</body>

</html>

@code
{
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private IComponentRenderMode? PageRenderMode
        => HttpContext.AcceptsInteractiveRouting() ? InteractiveServer : null;

}

